ipserc@galileo arith $grep -n "] = this" *.java
Conic.java:83:		this.matrix.complexMatrix[0][0] = this.complexMatrix[0][0]; 			// A
Conic.java:84:		this.matrix.complexMatrix[0][1] = this.complexMatrix[0][1].divides(2); 	// B/2
Conic.java:85:		this.matrix.complexMatrix[0][2] = this.complexMatrix[0][3].divides(2); 	// D/2
Conic.java:86:		this.matrix.complexMatrix[1][0] = this.complexMatrix[0][1].divides(2); 	// B/2
Conic.java:87:		this.matrix.complexMatrix[1][1] = this.complexMatrix[0][2]; 			// C
Conic.java:88:		this.matrix.complexMatrix[1][2] = this.complexMatrix[0][4].divides(2); 	// E/2
Conic.java:89:		this.matrix.complexMatrix[2][0] = this.complexMatrix[0][3].divides(2); 	// D/2
Conic.java:90:		this.matrix.complexMatrix[2][1] = this.complexMatrix[0][4].divides(2); 	// E/2
Conic.java:91:		this.matrix.complexMatrix[2][2] = this.complexMatrix[0][5]; 			// F
MatrixComplex.java:530:            cMatrix.complexMatrix[row][col] = this.complexMatrix[row][col].copy();
MatrixComplex.java:619:      for (int row = 0; row < rowLen; ++row) cMatrix.complexMatrix[row][0] = this.complexMatrix[row][col];  
MatrixComplex.java:778:      pivot.complexMatrix[0] = this.complexMatrix[row1];
MatrixComplex.java:779:      this.complexMatrix[row1] = this.complexMatrix[row2];
MatrixComplex.java:797:         this.complexMatrix[row1][col] = this.complexMatrix[row2][col];
MatrixComplex.java:887:            resultMatrix.complexMatrix[row][col] = this.complexMatrix[row][col].plus(cMatrix.complexMatrix[row][col]);
MatrixComplex.java:913:            resultMatrix.complexMatrix[row][col] = this.complexMatrix[row][col].minus(cMatrix.complexMatrix[row][col]);
MatrixComplex.java:942:            resultMatrix.complexMatrix[rowf][colf] = this.complexMatrix[rowf][colf].times(cNum);
MatrixComplex.java:1210:            cMatrix.complexMatrix[row][col] = this.complexMatrix[row][col].opposite();  		
MatrixComplex.java:1226:            cMatrix.complexMatrix[col][row] = this.complexMatrix[row][col];
MatrixComplex.java:1243:            cMatrix.complexMatrix[row][col] = this.complexMatrix[row][col].conjugate();		
MatrixComplex.java:1261:            cMatrix.complexMatrix[col][row] = this.complexMatrix[row][col].conjugate();
MatrixComplex.java:1294:            resultMatrix.complexMatrix[rowf][colf++] = this.complexMatrix[row][col];
MatrixComplex.java:1497:               if (b < i) { smaller.complexMatrix[a-1][b] = this.complexMatrix[a][b];
MatrixComplex.java:1499:               else if (b > i) { smaller.complexMatrix[a-1][b-1] = this.complexMatrix[a][b];
MatrixComplex.java:1524:            coefMatrix.complexMatrix[row][col] = this.complexMatrix[row][col];
MatrixComplex.java:1602:    		  eqsMatrix.complexMatrix[row] = this.complexMatrix[row].clone(); 
MatrixComplex.java:1736:            resultMatrix.complexMatrix[rrow][ccol] = this.complexMatrix[i][j];
MatrixComplex.java:1753:            subMatrix.complexMatrix[row][col] = this.complexMatrix[rows[row]][cols[col]];
MatrixComplex.java:2089:            extendedMatrix.complexMatrix[row][col] = this.complexMatrix[row][col];
MatrixComplex.java:2110:            extendedMatrix.complexMatrix[row][col] = this.complexMatrix[row][col];
MatrixComplex.java:2161:            cofactor.complexMatrix[rrow][ccol++] = this.complexMatrix[row][col];
MatrixComplex.java:2298:            case 1: charactPoly.complexMatrix[0][colLen-order] = this.trace().opposite(); 
MatrixComplex.java:2300:            default: charactPoly.complexMatrix[0][colLen-order] = this.coefCP(order).times(Math.pow(-1, order)); 
MatrixComplex.java:2386:	      pivote.complexMatrix[0] = this.complexMatrix[izq].clone();	// tomamos primer elemento como pivote
MatrixComplex.java:2392:	            aux.complexMatrix[0] = this.complexMatrix[i].clone();                  	// los intercambia
MatrixComplex.java:2393:	            this.complexMatrix[i] = this.complexMatrix[j].clone();
MatrixComplex.java:2397:	      this.complexMatrix[izq] = this.complexMatrix[j].clone(); 		// se coloca el pivote en su lugar de forma que tendremos
MatrixComplex.java:2418:      pivote.complexMatrix[0] = this.complexMatrix[izq].clone();	// tomamos primer elemento como pivote
MatrixComplex.java:2424:            aux.complexMatrix[0] = this.complexMatrix[i].clone();                  	// los intercambia
MatrixComplex.java:2425:            this.complexMatrix[i] = this.complexMatrix[j].clone();
MatrixComplex.java:2429:      this.complexMatrix[izq] = this.complexMatrix[j].clone(); 		// se coloca el pivote en su lugar de forma que tendremos
Polynom.java:99:				this.complexMatrix[row][col] = this.complexMatrix[row][colLen-1-col];
Polynom.java:316:			newPoly.complexMatrix[0][col] = this.complexMatrix[0][col].copy();
Polynom.java:387:				this.polyNorm[i][j] = this.complexMatrix[i][j].divides(this.complexMatrix[i][degree]);
Polynom.java:411:			cSol.complexMatrix[0][0] = this.complexMatrix[0][0].opposite().divides(this.complexMatrix[0][1]); 
Polynom.java:532:			result.complexMatrix[0][col] = this.complexMatrix[0][col].opposite();
Vector.java:107:			result.complexMatrix[0][col] = this.complexMatrix[0][col].plus(vector.complexMatrix[0][col]);
Vector.java:129:			result.complexMatrix[0][col] = this.complexMatrix[0][col].minus(vector.complexMatrix[0][col]);

